public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        if (beginWord == null || endWord == null || wordList == null ||
        beginWord.length()==0 || endWord.length()==0 || wordList.size() == 0 || beginWord.length() != endWord.length()) {
            return 0;
        }
        
        if (beginWord.equals(endWord)) {
            return 1;
        }
        if(wordList.contains(beginWord)){
            wordList.remove(beginWord);
        }
        if(!wordList.contains(endWord)){
            wordList.add(endWord);
        }
        
        Queue<String> q = new LinkedList<String>();
        q.offer(beginWord);
        
        int length = 1;
        while(!q.isEmpty()) {
            length++;
            int size = q.size();
            for (int i=0; i<size; i++) {
                String current = q.poll();
                for (String matchedWord:getMatchedWords(current, wordList)) {
                    if(matchedWord.equals(endWord)){
                        return length;
                    } else {
                        q.offer(matchedWord);
                        wordList.remove(matchedWord);
                    }
                }
            }
        }
        return 0;
    }
    private List<String> getMatchedWords(String current, Set<String> wordList) {
        List<String> matchedWords = new ArrayList<>();
        for (char c = 'a'; c < 'z'; c++) {
            for (int i = 0; i < current.length(); i++ ) {
                if (c == current.charAt(i)){
                    continue;
                } else {
                    String newWord = getNewWord(current, c, i);
                    if(wordList.contains(newWord)) {
                        matchedWords.add(newWord);
                    }
                }
            }
        }
        return matchedWords;
    }
    private String getNewWord(String word, char c, int index) {
       char[] newWord = word.toCharArray();
       newWord[index] = c;
       return new String(newWord);
    }
}
